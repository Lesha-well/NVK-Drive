from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db import add_user, get_user, delete_user, get_all_users
from keyboards.keyboards import get_course_keyboard, get_confirm_keyboard, get_navigation_keyboard, get_tags_keyboard, get_commands_menu_keyboard, TAGS
from typing import Union, Set, List

router = Router()

class ProfileCreation(StatesGroup):
    awaiting_photo = State()
    awaiting_skills = State()
    awaiting_tags = State()

class FindUsers(StatesGroup):
    awaiting_tags = State()

def _parse_tags_str(tags_str: Union[str, None]) -> Set[str]:
    if not tags_str:
        return set()
    return {t.strip() for t in tags_str.split(",") if t.strip()}

def _format_tags(tags: Union[Set[str], List[str], None]) -> str:
    if not tags:
        return "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    return ", ".join(sorted(tags))

# --------------------- –ö–û–ú–ê–ù–î–´ ---------------------
@router.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã –£—Ä–§–£!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è:",
        reply_markup=get_course_keyboard()
    )

@router.message(F.text == "/help")
async def help_command(message: Message):
    await message.answer(
        "üìö –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
        "/search - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "/delete_profile - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    )


@router.message(F.text == "/profile")
async def profile_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile."""
    user_id = message.from_user.id
    user_data = get_user(user_id)

    if user_data:
        text = (
            f"üìå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
            f"üë§ @{user_data[1]}\n"
            f"üìö –ö—É—Ä—Å: {user_data[2]}\n"
            f"üõ† –ù–∞–≤—ã–∫–∏: {user_data[4] or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        )
        if user_data[3]:  # photo_id
            await message.answer_photo(user_data[3], caption=text, reply_markup=get_confirm_keyboard())
        else:
            await message.answer(text, reply_markup=get_confirm_keyboard())
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é /start.")

@router.message(F.text == "/delete_profile")
async def delete_profile_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_profile."""
    user_id = message.from_user.id
    delete_user(user_id)
    await message.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")

@router.message(F.text == "/search")
async def search_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    me = get_user(user_id)
    my_tags = _parse_tags_str(me['tags'] if me else None)

    users = get_all_users(user_id)
    if not users:
        await message.answer("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        return

    users_sorted = sorted(users, key=lambda u: len(my_tags & _parse_tags_str(u['tags'])), reverse=True)
    await state.update_data(search_users=users_sorted, search_index=0, my_tags=list(my_tags))
    await show_user_profile(message, state, 0)

@router.message(F.text == "/find")
async def find_command(message: Message, state: FSMContext):
    await state.update_data(selected_tags=[])
    await message.answer(
    "üß≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
    reply_markup=get_tags_keyboard([], confirm_text="üîé –ù–∞–π—Ç–∏", confirm_callback="find_confirm")
)
    await state.set_state(FindUsers.awaiting_tags)

@router.message(F.text == "/menu")
async def menu_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."""
    await message.answer(
    "üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
    reply_markup=get_commands_menu_keyboard()
)

# --------------------- –ü–û–ö–ê–ó –ê–ù–ö–ï–¢ ---------------------
async def show_user_profile(
    message: Union[Message, CallbackQuery],
    state: FSMContext,
    index: int
):
    data = await state.get_data()
    users = data.get("search_users", [])
    if not users or index < 0 or index >= len(users):
        if isinstance(message, CallbackQuery):
            await message.message.edit_text("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        else:
            await message.answer("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        return

    current_user_tags = set(data.get("my_tags", []))
    user = users[index]
    their_tags = _parse_tags_str(user['tags'])
    matched = current_user_tags & their_tags

    text = (
        f"üë§ @{user['username']}\n"
        f"üìö –ö—É—Ä—Å: {user['course']}\n"
        f"üõ† –ù–∞–≤—ã–∫–∏: {_format_tags(their_tags)}\n"
    )
    if matched:
        text += f"‚ú® –°–æ–≤–ø–∞–≤—à–∏–µ –Ω–∞–≤—ã–∫–∏: {_format_tags(matched)}\n"
    text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['skills'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"

    keyboard = get_navigation_keyboard(index, len(users))

    if isinstance(message, CallbackQuery):
        # –ü–æ–¥–º–µ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user['photo_id']:
            await message.message.edit_caption(
                caption=text,
                reply_markup=keyboard
            )
        else:
            await message.message.edit_text(
                text=text,
                reply_markup=keyboard
            )
    else:
        # –ü—Ä–æ—Å—Ç–æ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        if user['photo_id']:
            await message.answer_photo(
                user['photo_id'],
                caption=text,
                reply_markup=keyboard
            )
        else:
            await message.answer(
                text,
                reply_markup=keyboard
            )

# --------------------- CALLBACK –ó–ê–ü–†–û–°–´ ---------------------
@router.callback_query(F.data.startswith("course_"))
async def handle_course(callback: CallbackQuery, state: FSMContext, bot: Bot):
    data_cb = callback.data
    course = data_cb.split("_")[1]
    if course == "master":
        course = "–ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞"
    elif course == "phd":
        course = "–ê—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞"
    else:
        course = f"{course} –∫—É—Ä—Å"

    await state.update_data(course=course, user_id=callback.from_user.id, username=callback.from_user.username)
    await callback.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(ProfileCreation.awaiting_photo)

@router.callback_query(F.data == "confirm_profile")
async def confirm_profile(callback: CallbackQuery, state: FSMContext):
    data_state = await state.get_data()
    add_user(
        data_state["user_id"],
        data_state["username"],
        data_state.get("course"),
        data_state.get("photo_id"),
        data_state.get("skills"),
        data_state.get("tags")
    )
    await callback.message.edit_text(
    "‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏—Ö –∞–Ω–∫–µ—Ç."
    )
    await state.clear()

@router.callback_query(F.data == "edit_profile")
async def edit_profile(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏—Ö –∞–Ω–∫–µ—Ç.")
    await state.clear()

@router.callback_query(F.data.startswith("nav_"))
async def navigate_profiles(callback: CallbackQuery, state: FSMContext):
    action, index = callback.data.split("_")[1], int(callback.data.split("_")[2])
    new_index = index - 1 if action == "prev" else index + 1
    await state.update_data(search_index=new_index)
    await show_user_profile(callback, state, new_index)

@router.callback_query(F.data.startswith("tag_"))
async def handle_tag_selection(callback: CallbackQuery, state: FSMContext):
    tag = callback.data.split("tag_")[1]
    cur = await state.get_data()
    selected = set(cur.get("selected_tags", []))
    if tag in selected:
        selected.remove(tag)
    else:
        if tag in TAGS:
            selected.add(tag)
    await state.update_data(selected_tags=list(selected))

    current_state = await state.get_state()
    is_find = current_state == FindUsers.awaiting_tags.state
    confirm_text = "üîé –ù–∞–π—Ç–∏" if is_find else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"
    confirm_cb = "find_confirm" if is_find else "tags_confirm"

    await callback.message.edit_reply_markup(
        reply_markup=get_tags_keyboard(list(selected), confirm_text=confirm_text, confirm_callback=confirm_cb)
    )

@router.callback_query(F.data == "tags_confirm")
async def confirm_tags(callback: CallbackQuery, state: FSMContext):
    cur = await state.get_data()
    selected = set(cur.get("selected_tags", []))
    await state.update_data(tags=",".join(sorted(selected)))

    data_state = await state.get_data()
    text = (
        f"üìå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
        f"üë§ @{data_state['username']}\n"
        f"üìö –ö—É—Ä—Å: {data_state['course']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data_state.get('skills') or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üõ† –ù–∞–≤—ã–∫–∏: {_format_tags(selected)}\n"
    )

    if callback.message.photo:
        await callback.message.edit_caption(
            caption=text,
            reply_markup=get_confirm_keyboard()
        )
    else:
        await callback.message.edit_text(
            text=text,
            reply_markup=get_confirm_keyboard()
        )

    await state.set_state(None)


@router.callback_query(F.data == "find_confirm")
async def find_confirm(callback: CallbackQuery, state: FSMContext):
    cur = await state.get_data()
    my_selected = set(cur.get("selected_tags", []))

    if not my_selected:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–∞–≤—ã–∫", show_alert=True)
        return

    all_users = get_all_users(callback.from_user.id)

    def overlap(u):
        their = _parse_tags_str(u['tags'])
        return len(my_selected & their)

    users_filtered = [u for u in all_users if overlap(u) > 0]
    users_sorted = sorted(users_filtered, key=lambda u: overlap(u), reverse=True)

    if not users_sorted:
        if callback.message.photo:
            await callback.message.edit_caption(
                caption="–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–±–æ—Ä –Ω–∞–≤—ã–∫–æ–≤."
            )
        else:
            await callback.message.edit_text(
                "–ù–∏–∫–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –Ω–∞–≤—ã–∫–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–±–æ—Ä –Ω–∞–≤—ã–∫–æ–≤."
            )
        await state.set_state(None)
        return

    await state.update_data(search_users=users_sorted, search_index=0, my_tags=list(my_selected))
    await show_user_profile(callback, state, 0)
    await state.set_state(None)

@router.callback_query(F.data.startswith("command_"))
async def handle_command_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."""
    command = callback.data.split("_")[1]
    msg = callback.message

    if command == "start":
        await state.clear()
        await msg.edit_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã –£—Ä–§–£!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å –æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=get_course_keyboard()
        )

    elif command == "help":
        await msg.edit_text(
            "üìö –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/profile - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É\n"
            "/search - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            "/find - –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –Ω–∞–≤—ã–∫–∞–º\n"
            "/delete_profile - –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
        )

    elif command == "profile":
        user_id = callback.from_user.id
        user_data = get_user(user_id)
        if user_data:
            text = (
                f"üìå –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n"
                f"üë§ @{user_data['username']}\n"
                f"üìö –ö—É—Ä—Å: {user_data['course']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data['skills'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"üõ† –ù–∞–≤—ã–∫–∏: {_format_tags(_parse_tags_str(user_data['tags']))}\n"
            )
            if user_data.get('photo_id'):
                await msg.edit_caption(caption=text, reply_markup=get_confirm_keyboard())
            else:
                await msg.edit_text(text, reply_markup=get_confirm_keyboard())
        else:
            await msg.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é /start.")

    elif command == "delete_profile":
        user_id = callback.from_user.id
        delete_user(user_id)
        await msg.edit_text("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞.")

    elif command == "search":
        user_id = callback.from_user.id
        me = get_user(user_id)
        my_tags = _parse_tags_str(me['tags'] if me else None)
        users = get_all_users(user_id)
        if not users:
            await msg.edit_text("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
            return
        users_sorted = sorted(users, key=lambda u: len(my_tags & _parse_tags_str(u['tags'])), reverse=True)
        await state.update_data(search_users=users_sorted, search_index=0, my_tags=list(my_tags))
        await show_user_profile(callback, state, 0)

    elif command == "find":
        await state.update_data(selected_tags=[])
        await msg.edit_text(
            "üß≠ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
            reply_markup=get_tags_keyboard([], confirm_text="üîé –ù–∞–π—Ç–∏", confirm_callback="find_confirm")
        )
        await state.set_state(FindUsers.awaiting_tags)


# --------------------- –§–û–¢–û + –û–ü–ò–°–ê–ù–ò–ï + –ù–ê–í–´–ö–ò ---------------------
@router.message(ProfileCreation.awaiting_photo, F.photo)
async def handle_photo(message: Message, state: FSMContext):
    photo = message.photo[-1]
    await state.update_data(photo_id=photo.file_id)
    await message.answer("üìù –ü–∞—Ä—É —Å–ª–æ–≤ –ø—Ä–æ —Å–µ–±—è –∏ —Ç–µ—Ö, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(ProfileCreation.awaiting_skills)


@router.message(ProfileCreation.awaiting_photo, F.text == "/skip")
async def skip_photo(message: Message, state: FSMContext):
    await state.update_data(photo_id=None)
    await message.answer("üìù –ü–∞—Ä—É —Å–ª–æ–≤ –ø—Ä–æ —Å–µ–±—è –∏ —Ç–µ—Ö, –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(ProfileCreation.awaiting_skills)


@router.message(ProfileCreation.awaiting_skills, F.text)
async def handle_skills(message: Message, state: FSMContext):
    skills = message.text[:500]
    await state.update_data(skills=skills, selected_tags=[])
    await message.answer(
        "üõ† –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏:",
        reply_markup=get_tags_keyboard([])
    )
    await state.set_state(ProfileCreation.awaiting_tags)


# --------------------- –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–û–ñ–ò–î–ê–ù–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ---------------------
@router.message(F.text)
async def handle_unexpected_text(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥–∞–º –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º.
    """
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é (/menu) –∏–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
    )